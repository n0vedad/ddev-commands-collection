#!/bin/bash

############################
# DDEV Commands Collection #
############################

## https://github.com/jackd248/ddev-commands-collection
## v<version/>
## dcc-autogenerated
. "$(dirname "$0")/../dcc-config.sh"
. "$(dirname "$0")/../scripts/dcc-colors.sh"
printf "${reset}${cyan}[DCC]${reset} DDEV Commands Collection\n"

## Description: Install and initialize local TYPO3 instance
## Usage: init
## Example: "ddev init"

echo
echo -e "${magenta}[CONFIG]${reset}"

# Prüfung des aktuellen Zustands der Installation
TYPO3_INITIALIZED=false
if [ -f "${composerPathApp}/vendor/bin/typo3" ] && [ -f "${composerPathApp}/config/system/settings.php" ]; then
    TYPO3_INITIALIZED=true
    echo -e "${yellow}[INFO]${reset} TYPO3 appears to be already initialized"
fi

ASSETS_BUILT=false
if [ -d "${composerPathDeployment}/node_modules" ] && [ -d "${composerPathDeployment}/public/_assets" ]; then
    ASSETS_BUILT=true
    echo -e "${yellow}[INFO]${reset} Assets appear to be already built"
fi

# Menü zur Auswahl der Aktionen anzeigen
echo
echo -e "${cyan}[SETUP MENU]${reset} Please select the actions you want to perform:"
echo -e "${bold}1)${reset} Initialize TYPO3 instance (composer install, TYPO3 setup)"
echo -e "${bold}2)${reset} Sync database from stage system (requires TYPO3 Console)"
echo -e "${bold}3)${reset} Build frontend assets (npm install & build)"
echo -e "${bold}4)${reset} Complete setup (all of the above)"
echo -e "${bold}0)${reset} Skip setup and exit"
echo

# Benutzereingabe verarbeiten
while true; do
    read -p "Enter your choice (0-4): " choice
    
    # Eingabe validieren
    case $choice in
        0)
            echo -e "${blue}[INFO]${reset} Setup skipped by user"
            exit 0
            ;;
        1)
            INIT_TYPO3=true
            SYNC_DB=false
            INSTALL_ASSETS=false
            break
            ;;
        2)
            INIT_TYPO3=false
            SYNC_DB=true
            INSTALL_ASSETS=false
            break
            ;;
        3)
            INIT_TYPO3=false
            SYNC_DB=false
            INSTALL_ASSETS=true
            break
            ;;
        4)
            INIT_TYPO3=true
            SYNC_DB=true
            INSTALL_ASSETS=true
            break
            ;;
        *)
            echo -e "${red}[ERROR]${reset} Invalid choice. Please enter a number between 0 and 4."
            continue
            ;;
    esac
done

echo
echo -e "${blue}[INFO]${reset} Starting selected operations..."

# TYPO3 Installation durchführen
if [[ $INIT_TYPO3 == true ]]
then
    if [ "$TYPO3_INITIALIZED" = true ]; then
        echo -e "${yellow}[WARN]${reset} TYPO3 is already initialized, skipping initialization"
        echo -e "${blue}[INFO]${reset} Running composer install to ensure all dependencies are present"
        cd ${composerPathApp}
        composer install
    else
        echo -e "${blue}[INFO]${reset} Install TYPO3 instance"
        cd ${composerPathApp}
        
        # Umgebungsdatei erstellen falls vorhanden
        if [ -f ".env.ddev.dist" ]; then
            cp .env.ddev.dist .env 2>/dev/null && echo -e "${green}[OK]${reset} .env file created from .env.ddev.dist"
        elif [ -f ".env.example" ]; then
            cp .env.example .env 2>/dev/null && echo -e "${green}[OK]${reset} .env file created from .env.example"
        fi
        
        echo -e "${blue}[INFO]${reset} Install dependencies"
        printf "${reset}${cyan}[DCC]${reset}${reset}<web> ${black}composer install${reset}\n"
        composer install

        echo -e "${blue}[INFO]${reset} Setup TYPO3"
        printf "${reset}${cyan}[DCC]${reset}${reset}<web> ${black}php vendor/bin/typo3 setup --no-interaction --force${reset}\n"
        php vendor/bin/typo3 setup --no-interaction --force \
            --server-type=apache \
            --driver=mysqli \
            --host=db \
            --dbname=db \
            --username=db \
            --password=db \
            --admin-username=admin \
            --admin-user-password=!Admin1234 \
            --admin-email=admin@example.com \
            --project-name="${DDEV_SITENAME}.${DDEV_TLD}" \
            --create-site=https://${DDEV_SITENAME}.${DDEV_TLD}
            
        echo -e "${green}[OK]${reset} TYPO3 instance installed"
    fi
fi

# Datenbank-Synchronisation durchführen
if [[ $SYNC_DB == true ]]
then
    echo -e "${blue}[INFO]${reset} Sync remote database into local database"
    printf "${reset}${cyan}[DCC]${reset}${reset}<web> ${black}db_sync_tool -f ${composerPathDeployment}/../deployment/db-sync-tool/sync-${defaultSyncSystem}-to-local.${defaultSyncFileEnding}${reset}\n"
    db_sync_tool -f ${composerPathDeployment}/../deployment/db-sync-tool/sync-${defaultSyncSystem}-to-local.${defaultSyncFileEnding}

    # Datenbank-Schema aktualisieren und Cache leeren
    ${composerPathApp}/vendor/bin/typo3 database:updateschema
    ${composerPathApp}/vendor/bin/typo3 cache:flush
    
    # FAQ-Sektion für Sync-Probleme anzeigen
    sh "$(dirname "$0")/../faq/dcc-faq-web-sync.sh"
fi

# Frontend-Assets erstellen
if [[ $INSTALL_ASSETS == true ]]
then
    if [ "$ASSETS_BUILT" = true ]; then
        echo -e "${yellow}[WARN]${reset} Assets appear to be already built"
        while true; do
            read -p "Force rebuild? (y/N): " force_rebuild
            case $force_rebuild in
                [Yy]*)
                    echo -e "${blue}[INFO]${reset} Force rebuilding assets"
                    cd ${composerPathDeployment}
                    rm -rf node_modules
                    printf "${reset}${cyan}[DCC]${reset}${reset}<web> ${black}npm ci${reset}\n"
                    npm ci
                    printf "${reset}${cyan}[DCC]${reset}${reset}<web> ${black}npm run build${reset}\n"
                    npm run build
                    echo -e "${green}[OK]${reset} Assets rebuilt"
                    break
                    ;;
                [Nn]*|"")
                    echo -e "${blue}[INFO]${reset} Skipping asset build"
                    break
                    ;;
                *)
                    echo -e "${red}[ERROR]${reset} Please answer yes (y) or no (n)."
                    ;;
            esac
        done
    else
        echo -e "${blue}[INFO]${reset} Install frontend dependencies"
        cd ${composerPathDeployment}
        printf "${reset}${cyan}[DCC]${reset}${reset}<web> ${black}npm ci${reset}\n"
        npm ci
        echo -e "${blue}[INFO]${reset} Build assets"
        printf "${reset}${cyan}[DCC]${reset}${reset}<web> ${black}npm run build${reset}\n"
        npm run build
        echo -e "${green}[OK]${reset} Assets installed"
    fi
fi

echo
echo -e "${green}[SUCCESS]${reset} TYPO3 setup completed successfully!"

# Zusammenfassung der durchgeführten Aktionen anzeigen
echo -e "${cyan}[SUMMARY]${reset} Completed actions:"
if [[ $INIT_TYPO3 == true ]]; then
    echo -e "  ✓ TYPO3 instance initialized"
fi
if [[ $SYNC_DB == true ]]; then
    echo -e "  ✓ Database synchronized from ${defaultSyncSystem}"
fi
if [[ $INSTALL_ASSETS == true ]]; then
    echo -e "  ✓ Frontend assets built"
fi